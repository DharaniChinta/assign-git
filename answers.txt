1) What is a gitignore file and what should it include for a Java project? 

Ans: A .gitignore file is used to specify files or directories that 
should be excluded from version control management (VCS) such as Git. 
It contains a list of file patterns that Git should ignore and not track changes for.

For a Java project, a typical .gitignore file should include the following:
# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*

We can add more specific files or directories depending on our project.


2) What does fast-forward in git mean? 

Ans: "Fast-forward" in Git is a term used to describe a specific type of merging operation. 
When you merge one branch into another, Git automatically evaluates the situation and chooses 
the best strategy to use. The "fast-forward" strategy is a simple, efficient approach that is 
used when the branch being merged is a linear continuation of the branch you are merging into.

So fast-forward merges literally move your main branch's tip forward to the end of your 
feature branch. This keeps all commits created in your feature branch sequential while 
integrating it neatly back into your main branch.

3) Why should you have different branches? 

Ans: Branches in Git allow you to work on different versions of your codebase simultaneously. 
This helps you to isolate your changes, experiment with new ideas, collaborate with others, and 
manage different stages of your project. By using branches, you can have multiple versions of your code, 
making it easier to revert changes if necessary and keep your development process organized.

4) In a project how many remote Git repositories do you usually have? 
Ans: It completely depends on the project architecture. Usually a project has one remote Git repository, serving
as the central source of truth for the codebase. Multiple local copies of the repository can be used by individual
developers for their own work. But if it has multiple services i.e microservice architecture, each service will
have their own remote Git repositories.